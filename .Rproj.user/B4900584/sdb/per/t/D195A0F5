{
    "collab_server" : "",
    "contents" : "#' RDD local\n#'\n#' Estimate local RDD.\n#'\n#' @param x Scores;\n#' @param y Dependent variable;\n#' @param c Cutpoint;\n#' @param cluster Cluster se;\n#' @param p Poly order (default 1);\n#' @param bw Bandwitdh selector (default mserd);\n#' @param var.name Variable name;\n#' @param h Bandwidth. If filled, \\code{bw} is ignored;\n#' @param triangular Triangular kernel? (default TRUE).\n#'\n#' @import lmtest\n#' @import sandwich\n#' @import rdrobust\n#' @import stats\n#'\n#' @export\n#'\n#' @return A list object.\n\nrdd_loc <- function(x, y, c = 0, cluster = NULL, p = 1, bw = \"mserd\", var.name = \"var\", h = NULL, triangular = T){\n\n  # tests the inputs\n  if(!is.numeric(x) | !is.numeric(y)) stop(\"x e y must be numeric.\")\n  if(!p %in% c(1:5)) stop(\"p must be between 1 and 5.\")\n  xrange <- range(x, na.rm = T)\n  if(c < xrange[1] | c > xrange[2]) stop(\"c is out of x.\")\n  if(!is.character(var.name) & !is.null(var.name)) stop(\"var.name must be character.\")\n  if(!is.logical(triangular)) stop(\"triangular must be logical.\")\n\n  # cleans the data\n  if(!is.null(cluster)) data <- data.frame(x = x, y = y, cluster = cluster)\n  else data <- data.frame(x = x, y = y)\n  data <- data[complete.cases(data),]\n  data$x <- data$x - c\n\n  # tests the h and cuts the data\n  if(is.null(h)) h <- rdrobust::rdbwselect(y = data$y, x = data$x, c = 0, p = p, q = p + 1, bwselect = bw)$bws[1]\n  else {\n    if(h < xrange[1] | h > xrange[2]) stop(\"h is out of x.\")\n    h <- abs(h)\n  }\n\n  data <- data[data$x > -h & data$x < h,]\n  if(!is.null(cluster)) data$cluster <- as.character(data$cluster)\n  data$treat <- data$x >= 0\n  if(length(unique(data$treat)) != 2) stop(\"There is not variation in the treatment.\")\n\n  med_controle <- round(mean(data$y[!data$treat]), 2)\n  med_trat<- round(mean(data$y[data$treat]), 2)\n\n  if(triangular) weights <- 1 - abs(data$x) / h\n  else weights <- NULL\n\n  if(p == 1) reg <- lm(y ~ treat * x, data = data, weights = weights)\n  else if(p == 2) reg <- lm(y ~ treat*x + treat*I(x^2), data = data, weights = weights)\n  else if(p == 3) reg <- lm(y ~ treat*x + treat*I(x^2) + treat*I(x^3), data = data, weights = weights)\n  else if(p == 4) reg <- lm(y ~ treat*x + treat*I(x^2) + treat*I(x^3) + treat*I(x^4), data = data, weights = weights)\n  else if(p == 5) reg <- lm(y ~ treat*x + treat*I(x^2) + treat*I(x^3) + treat*I(x^4) + treat*I(x^5), data = data, weights = weights)\n\n  coef <- as.numeric(coef(reg)[2])\n  if(!is.null(cluster)){\n\n    cluster_se <- function(model, cluster) {\n      M <- length(unique(cluster))\n      N <- length(cluster)\n      K <- model$rank\n      dfc <- (M/(M - 1)) * ((N - 1)/(N - K))\n      uj <- apply(sandwich::estfun(model), 2, function(x) tapply(x, cluster, sum))\n      rcse.cov <- dfc * sandwich::sandwich(model, meat. = crossprod(uj)/N)\n      rcse.se <- lmtest::coeftest(model, rcse.cov)\n      return(rcse.se[2, 2])\n    }\n\n    se <- cluster_se(model = reg, cluster = cluster)\n  }\n  else se <- as.numeric(sqrt(diag(sandwich::vcovHC(reg, type = \"HC1\")))[2])\n  ci_low <- round(coef - 1.96 * se, 2)\n  ci_up <- round(coef + 1.96 * se, 2)\n  N <- sum(summary(reg)$df[1:2])\n  if(!is.numeric(se)) stop(\"SE wrong.\")\n  if(!is.numeric(coef)) stop(\"COEF wrong.\")\n  pval <- 2 * stats::pnorm(abs(coef/se), lower.tail = F)\n\n  if(pval < 0.05) coef_ast <- paste0(round(coef, 2), \"*\")\n  else coef_ast <- round(coef, 2)\n\n  res <- data.frame(var.name = var.name, med_trat = med_trat, med_cont = med_controle, dif = med_trat - med_controle,  coef = coef_ast, se = round(se, 2), ci = paste0(\"[\", ci_low, \", \", ci_up, \"]\"), pval = round(pval, 2), bw = round(h, 2), N = N, stringsAsFactors = F)\n  res <- apply(res, 2, as.character)\n  out <- list(res = res, coef = coef, se = se, pval = pval, N = N, bw = h)\n  out\n}\n",
    "created" : 1479569333490.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "948247718",
    "id" : "D195A0F5",
    "lastKnownWriteTime" : 1479569396,
    "last_content_update" : 1479569396485,
    "path" : "C:/Users/User/Google Drive/R/Pacotes/fmeireles/R/rdd_loc.R",
    "project_path" : "R/rdd_loc.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}